Rubble is a compiler project for a simplistic imperative programming language
without garbage collection -- the sort of thing you would put together for a
school project.  The only sophisticated feature slated for inclusion is type
inference at the statement level as in C#.

Source code should look roughly like this:

def factorial(n : UInt32) UInt32:
    if n == 0 then:
        return 1
    else:
        return n * factorial(n - 1)

The overloading of : to mean a new block when it immediately follows something
else and a type declaration otherwise is rather strange, but of all the
choices I've considered, it's the one I dislike least.  For example, this is a
toy compiler, so the language does not yet support user-defined types, but I
will want to have something other than "do" to indicate the beginning of a
layout block for records.

Types are inferred using type class constraints, as in Haskell, but the set
of type classes is fixed because this is a toy language.  The type supported
are the usual set of machine word types, the booleans, functions, pointers
to all of those, some sort of one-dimensional array, and a unit type.  There
will not be a string type; the only form of interaction with the outside world
will be returning a value to the shell.

There is a use case for two types of arrays.  The first type places a size_t
size right before the first array element, which is useful, among other things,
for putting buffers directly onto the stack.  The second type combines a size
with a pointer to a separate buffer.  An implementation of APL-style arrays
would use both: the first would be in the array descriptor to store the array
shape, while the second would point to the data buffer.  Strictly speaking,
one could also just use a pointer and store the shape elsewhere on the heap,
but that seems wasteful.

Flow control is deliberately minimal.  The only control flow constructs are
function calls, the infinite loop, the conditional statement, and the break
statement.  Everything else can be built efficiently on top of those.  The
while loop, for example, translates to:

forever:
    if (not(cond)): break
    body

The syntax is not finalized.  At present, I am trying a style where function
application is indicated by putting the function next to its argument and
associates to the right.  So this:

foo(bar, baz, qux, (1/2 + 3) * 4) * fee(fi, fo, fum)

doesn't change, but this:

foo(bar(baz(qux)))

becomes this:

foo bar baz qux

I don't know whether that will gain me anything.
